import Foundation

/*
 * Reto #4
 * 츼REA DE UN POL칈GONO
 * Fecha publicaci칩n enunciado: 24/01/22
 * Fecha publicaci칩n resoluci칩n: 31/01/22
 * Dificultad: F츼CIL
 *
 * Enunciado: Crea UNA 칔NICA FUNCI칍N (importante que s칩lo sea una) que sea capaz de calcular y retornar el 치rea de un pol칤gono.
 * - La funci칩n recibir치 por par치metro s칩lo UN pol칤gono a la vez.
 * - Los pol칤gonos soportados ser치n Tri치ngulo, Cuadrado y Rect치ngulo.
 * - Imprime el c치lculo del 치rea de un pol칤gono de cada tipo.
 *
 * Informaci칩n adicional:
 * - Usa el canal de nuestro discord (https://mouredev.com/discord) "游대reto-semanal" para preguntas, dudas o prestar ayuda la acomunidad.
 * - Puedes hacer un Fork del repo y una Pull Request al repo original para que veamos tu soluci칩n aportada.
 * - Revisar칠 el ejercicio en directo desde Twitch el lunes siguiente al de su publicaci칩n.
 * - Subir칠 una posible soluci칩n al ejercicio el lunes siguiente al de su publicaci칩n.
 *
 */

enum poligono{
    case triangulo
    case cuadrado
    case rectangulo
}

struct Poligono {
    let tipo: poligono
    let base: Float
    let altura: Float
    
    init(tipo: poligono, base: Float, altura: Float? = nil) {
        self.tipo = tipo
        self.base = base
        self.altura = altura == nil || tipo == .cuadrado ? base : altura!
    }
}

func area(poligono: Poligono) -> Float{
    var area = poligono.base * poligono.altura
    
    if poligono.tipo == .triangulo {
        area /= 2
    }
    
    return area
}

let triangulo = Poligono(tipo: .triangulo, base: 3, altura: 4)
print(area(poligono: triangulo))

let cuadrado = Poligono(tipo: .cuadrado, base: 3)
print(area(poligono: cuadrado))

let rectangulo = Poligono(tipo: .rectangulo, base: 3, altura: 4)
print(area(poligono: rectangulo))
